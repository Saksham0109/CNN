from torch import nn
class NeuralNetwork(nn.Module):
    def __init__(self):
        super(NeuralNetwork,self).__init__()
        self.c1=nn.Conv2d(in_channels=3,out_channels=96,kernel_size=11,stride=4,padding=0)
        self.s1=nn.MaxPool2d(kernel_size=3,stride=2)
        self.c2=nn.Conv2d(in_channels=96,out_channels=256,kernel_size=5,stride=1,padding=2)
        self.s2=nn.MaxPool2d(kernel_size=3,stride=2)
        self.c3=nn.Conv2d(in_channels=256,out_channels=384,kernel_size=3,stride=1,padding=1)
        self.c4=nn.Conv2d(in_channels=384,out_channels=384,kernel_size=3,stride=1,padding=1)
        self.c5=nn.Conv2d(in_channels=384,out_channels=256,kernel_size=3,stride=1,padding=1)
        self.s3=nn.MaxPool2d(kernel_size=3,stride=2)
        self.flatten= nn.Flatten(start_dim=1)
        self.l1=nn.Linear(in_features=256*6*6,out_features=4096)
        self.l2=nn.Linear(in_features=4096,out_features=4096)
        self.l3=nn.Linear(in_features=4096,out_features=1000)
        self.act=nn.ReLU()
        self.d1=nn.Dropout()
        self.d2=nn.Dropout()

    def forward(self,x):
        x=self.c1(x)
        x=self.act(x)
        x=self.s1(x)
        x=self.c2(x)
        x=self.act(x)
        x=self.s2(x)
        x=self.c3(x)
        x=self.act(x)
        x=self.c4(x)
        x=self.act(x)
        x=self.c5(x)
        x=self.act(x)
        x=self.s3(x)
        x=self.d1(x)
        x=self.flatten(x)
        x=self.l1(x)
        x=self.act(x)
        x=self.d2(x)
        x=self.l2(x)
        x=self.act(x)
        x=self.l3(x)
        return x